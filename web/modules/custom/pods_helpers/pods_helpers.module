<?php

/**
 * @file
 */

use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_user_login.
 */
function pods_helpers_user_login(UserInterface $account) {
  $currentRoles = $account->getRoles();
  if (count($currentRoles) > 1) {
    // On user creation (including a user created via an eAuth initial login), Drupal automatically assigns the "authenticated" role.
    // Any user who has a role assigned to it will have "authenticated" plus whatever role they have. We want this hook to target only
    // new users who are (presumably) logging in using eAuth.
    // @todo can this be converted to a better method?
    return;
  }
  $userEmail = $account->getEmail();
  // @todo handle missing values on received token
  // if (check for missing eauthID and any other values from token) {
  //   logout user and log message;
  // }
  // $user->set('field_eauth_id', 'TESTING')->save();
  // and set other values on user entity.
  $contacts = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'contact', 'title' => $userEmail]);
  if (empty($contacts)) {
    Drupal::logger('pods_helpers')->info('user not found: %user', ['%user' => $userEmail]);
    return;
    // @todo add a forced logout here
  }
  elseif (count($contacts) > 1) {
    Drupal::logger('pods_helpers')->info('more than one contact found');
    return;
    // @todo create an entity create hook for a contact entity that checks for existing contacts with the same email and prevents
  }
  // We don't want an array.
  $contact = reset($contacts);

  $userId = $account->id();
  $user = User::load($userId);
  // @todo unset all roles first so that the only roles the user has are the ones we are setting here
  // Update the contact entity by setting its "active" field to "Active".
  if ($contact->hasField('field_active')) {
    $contact->set('field_active', TRUE)->save();
  }
  if ($contact->hasField('field_awardee_user')) {
    $contact->field_awardee_user->target_id = $userId;
    $contact->save();
  }
  $assignedRole = NULL;
  $assignedType = NULL;
  $assignedAdmin = NULL;
  if ($contact->hasField('field_contact_role') && !$contact->get('field_contact_role')->isEmpty()) {
    $assignedRole = $contact->get('field_contact_role')->value;
  }
  if ($contact->hasField('field_contact_type') && !$contact->get('field_contact_type')->isEmpty()) {
    $assignedType = $contact->get('field_contact_type')->value;
  }
  if ($contact->hasField('field_admin_user') && !$contact->get('field_admin_user')->isEmpty()) {
    $assignedAdmin = $contact->get('field_admin_user')->target_id;
  }
  else {
    // If 'field_admin_user' is empty, by default we use the author of the contact node.
    $assignedAdmin = $contact->getOwnerId();
  }
  $user->addRole($assignedRole)
    ->addRole($assignedType)
    ->set('field_admin_user', $assignedAdmin)
    ->save();
}

// @todo configure importer to use either CSV Importer, Feeds, or Webform
/**
 * Implements hook_form_FORM_ID_alter() for CSV Importer form.
 */
// Function pods_helpers_form_csv_importer_form_alter(&$form, &$form_state, $form_id) {
// Check if the user has the 'nrcs-awardee' role.
// $user = \Drupal::currentUser();
// If (in_array('nrcs_awardee', $user->getRoles())) {
//   $form['importer']['entity_type']['#access'] = FALSE;
//   $form['importer']['entity_type']['#default_value'] = 'node';.
// $form['importer']['delimiter']['#access'] = FALSE;
// $form['importer']['delimiter']['#default_value'] = ',';
// $form['importer']['entity_type_bundle'] = [
//     '#type' => 'select',
//     '#title' => t('Select sheet type'),
//     '#options' => [
//       'waste_treatment' => t('Waste Treatment'),
//       'waste_treatment_lagoon' => t('Waste Treatment Lagoon')
//     ],
//     '#required' => TRUE,
//   ];
// }
// }.

/**
 * Implements hook_node_access().
 */
function pods_helpers_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Check if the operation is 'view'.
  if ($op === 'view' && $node->isPublished()) {
    $access_rule = $node->get('field_access_rule')->value;

    switch ($access_rule) {
      case 'visible_all':
        // Allow access to all users.
        return AccessResult::allowed();

      case 'visible_owner':
        // Check if the user is the node author.
        if ($node->getOwnerId() === $account->id()) {
          return AccessResult::allowed();
        }
        return AccessResult::forbidden();

      case 'visible_group':
        // Future implementation for group access.
        // Placeholder - currently behaves like 'visible_all'.
        return AccessResult::allowed();

      default:
        // Default behavior if field is not set or has an unrecognized value.
        return AccessResult::neutral();
    }
  }

  // No opinion for other operations, so return neutral.
  return AccessResult::neutral();
}
