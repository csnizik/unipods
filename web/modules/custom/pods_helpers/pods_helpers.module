<?php

/**
 * @file
 */

use Drupal\user\UserInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_user_login.
 */
function pods_helpers_user_login(UserInterface $account) {
  $currentRoles = $account->getRoles();
  // If (!empty($currentRoles)) {
  // return;
  // }.
  $userEmail = $account->getEmail();
  $user = User::load($account->id());
  // @todo handle missing values on received token
  // if (check for missing eauthID and any other values from token) {
  //   logout user and log message;
  // }
  // $user->set('field_eauth_id', 'TESTING')->save();
  // and set other values on user entity.
  $contacts = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'contact', 'title' => $userEmail]);
  if (empty($contacts)) {
    Drupal::logger('pods_helpers')->info('user not found: %user', ['%user' => $userEmail]);
    // @todo add a forced logout here
  }
  elseif (count($contacts) > 1) {
    Drupal::logger('pods_helpers')->info('more than one contact found');
    // @todo create an entity create hook for a contact entity that checks for existing contacts with the same email and prevents
    return;
  }

  // @todo unset all roles first so that the only roles the user has are the ones we are setting here
  // We don't want an array.
  $contact = reset($contacts);
  $assignedRole = NULL;
  $assignedType = NULL;
  $assignedAdmin = NULL;
  if ($contact->hasField('field_contact_role') && !$contact->get('field_contact_role')->isEmpty()) {
    $assignedRole = $contact->get('field_contact_role')->value;
  }
  if ($contact->hasField('field_contact_type') && !$contact->get('field_contact_type')->isEmpty()) {
    $assignedType = $contact->get('field_contact_type')->value;
  }
  if ($contact->hasField('field_admin_user') && !$contact->get('field_admin_user')->isEmpty()) {
    $assignedAdmin = $contact->get('field_admin_user')->target_id;
  }
  else {
    // If 'field_admin_user' is empty, by default we use the author of the contact node.
    $assignedAdmin = $contact->getOwnerId();
  }
  $user->addRole($assignedRole)
    ->addRole($assignedType)
    ->set('field_admin_user', $assignedAdmin)
    ->save();

  Drupal::logger('pods_helpers')->info('role: %role, type: %type, admin: %admin', ['%role' => $assignedRole, '%type' => $assignedType, '%admin' => $assignedAdmin]);

}

// @todo configure importer to use either CSV Importer, Feeds, or Webform
/**
 * Implements hook_form_FORM_ID_alter() for CSV Importer form.
 */
// Function pods_helpers_form_csv_importer_form_alter(&$form, &$form_state, $form_id) {
// Check if the user has the 'nrcs-awardee' role.
// $user = \Drupal::currentUser();
// If (in_array('nrcs_awardee', $user->getRoles())) {
//   $form['importer']['entity_type']['#access'] = FALSE;
//   $form['importer']['entity_type']['#default_value'] = 'node';.
// $form['importer']['delimiter']['#access'] = FALSE;
// $form['importer']['delimiter']['#default_value'] = ',';
// $form['importer']['entity_type_bundle'] = [
//     '#type' => 'select',
//     '#title' => t('Select sheet type'),
//     '#options' => [
//       'waste_treatment' => t('Waste Treatment'),
//       'waste_treatment_lagoon' => t('Waste Treatment Lagoon')
//     ],
//     '#required' => TRUE,
//   ];
// }
// }.
